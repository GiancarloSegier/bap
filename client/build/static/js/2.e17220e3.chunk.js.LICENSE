/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */

/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*!
       * Module dependencies.
       */

/*!
       * Get the bson type, if it exists
       */

/*!
       * Get the last element of an array
       */

/*!
       * Produces a collection name from model `name`. By default, just returns
       * the model name
       *
       * @param {String} name a model name
       * @param {Function} pluralize function that pluralizes the collection name
       * @return {String} a collection name
       * @api private
       */

/*!
       * Determines if `a` and `b` are deep equal.
       *
       * Modified from node/lib/assert.js
       *
       * @param {any} a a value to compare to `b`
       * @param {any} b a value to compare to `a`
       * @return {Boolean}
       * @api private
       */

/*!
       * Object clone with Mongoose natives support.
       *
       * If options.minimize is true, creates a minimal data object. Empty objects and undefined values will not be cloned. This makes the data payload sent to MongoDB as small as possible.
       *
       * Functions are never cloned.
       *
       * @param {Object} obj the object to clone
       * @param {Object} options
       * @param {Boolean} isArrayChild true if cloning immediately underneath an array. Special case for minimize.
       * @return {Object} the cloned object
       * @api private
       */

/*!
       * Shallow copies defaults into options.
       *
       * @param {Object} defaults
       * @param {Object} options
       * @return {Object} the merged object
       * @api private
       */

/*!
       * ignore
       */

/*!
       * Generates a random string
       *
       * @api private
       */

/*!
       * Merges `from` into `to` without overwriting existing properties.
       *
       * @param {Object} to
       * @param {Object} from
       * @api private
       */

/*!
       * Applies toObject recursively.
       *
       * @param {Document|Array|Object} obj
       * @return {Object}
       * @api private
       */

/*!
       * Determines if `arg` is an object.
       *
       * @param {Object|Array|String|Function|RegExp|any} arg
       * @api private
       * @return {Boolean}
       */

/*!
       * Determines if `arg` is a plain old JavaScript object (POJO). Specifically,
       * `arg` must be an object but not an instance of any special class, like String,
       * ObjectId, etc.
       *
       * `Object.getPrototypeOf()` is part of ES5: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf
       *
       * @param {Object|Array|String|Function|RegExp|any} arg
       * @api private
       * @return {Boolean}
       */

/*!
       * Determines if `obj` is a built-in object like an array, date, boolean,
       * etc.
       */

/*!
       * Determines if `val` is an object that has no own keys
       */

/*!
       * Search if `obj` or any POJOs nested underneath `obj` has a property named
       * `key`
       */

/*!
       * A faster Array.prototype.slice.call(arguments) alternative
       * @api private
       */

/*!
       * process.nextTick helper.
       *
       * Wraps `callback` in a try/catch + nextTick.
       *
       * node-mongodb-native has a habit of state corruption when an error is immediately thrown from within a collection callback.
       *
       * @param {Function} callback
       * @api private
       */

/*!
       * Returns true if `v` is an object that can be serialized as a primitive in
       * MongoDB
       */

/*!
       * Returns if `v` is a mongoose object that has a `toObject()` method we can use.
       *
       * This is for compatibility with libs like Date.js which do foolish things to Natives.
       *
       * @param {any} v
       * @api private
       */

/*!
       * Converts `expires` options of index objects to `expiresAfterSeconds` options for MongoDB.
       *
       * @param {Object} object
       * @api private
       */

/*!
       * populate helper
       */

/*!
         * Return the value of `obj` at the given `path`.
         *
         * @param {String} path
         * @param {Object} obj
         */

/*!
       * Sets the value of `obj` at the given `path`.
       *
       * @param {String} path
       * @param {Anything} val
       * @param {Object} obj
       */

/*!
       * Returns an array of values from object `o`.
       *
       * @param {Object} o
       * @return {Array}
       * @private
       */

/*!
       * @see exports.options
       */

/*!
       * Safer helper for hasOwnProperty checks
       *
       * @param {Object} obj
       * @param {String} prop
       */

/*!
       * Determine if `val` is null or undefined
       *
       * @return {Boolean}
       */

/*!
       * Flattens an array.
       *
       * [ 1, [ 2, 3, [4] ]] -> [1,2,3,4]
       *
       * @param {Array} arr
       * @param {Function} [filter] If passed, will be invoked with each item in the array. If `filter` returns a falsy value, the item will not be included in the results.
       * @return {Array}
       * @private
       */

/*!
       * Removes duplicate values from an array
       *
       * [1, 2, 3, 3, 5] => [1, 2, 3, 5]
       * [ ObjectId("550988ba0c19d57f697dc45e"), ObjectId("550988ba0c19d57f697dc45e") ]
       *    => [ObjectId("550988ba0c19d57f697dc45e")]
       *
       * @param {Array} arr
       * @return {Array}
       * @private
       */

/*!
       * Determines if two buffers are equal.
       *
       * @param {Buffer} a
       * @param {Object} b
       */

/*!
       * Decorate buffers
       */

/*!
       * The buffer module from node.js, for the browser.
       *
       * @author   Feross Aboukhadijeh <http://feross.org>
       * @license  MIT
       */

/*!
     * Module exports.
     */

/*!
     * Simplified lodash.get to work around the annoying null quirk. See:
     * https://github.com/lodash/lodash/issues/3659
     */

/*!
         * ignore
         */

/*!
         * Runs queued functions
         */

/*!
       * Document exposes the NodeJS event emitter API, so you can use
       * `on`, `once`, etc.
       */

/*!
       * Applies virtuals properties to `json`.
       */

/*!
       * Applies virtuals properties to `json`.
       *
       * @param {Document} self
       * @param {Object} json
       * @return {Object} `json`
       */

/*!
       * Converts to POJO when you use the document for querying
       */

/*!
         * Init helper.
         *
         * @param {Object} self document instance
         * @param {Object} obj raw mongodb doc
         * @param {Object} doc object we are initializing
         * @api private
         */

/*!
         * If populating a path within a document array, make sure each
         * subdoc within the array knows its subpaths are populated.
         *
         * ####Example:
         *     const doc = await Article.findOne().populate('comments.author');
         *     doc.comments[0].populated('author'); // Should be set
         */

/*!
           * ignore
           */

/*!
         * Minimizes an object, removing undefined values and empty objects
         *
         * @param {Object} object to minimize
         * @return {Object}
         */

/*!
        * Avoid Node deprecation warning DEP0079
        */

/*!
       * Module exports.
       */

/*!
       * Just like handleArray, except also allows `[]` because surprisingly
       * `$in: [1, []]` works fine
       */

/*!
       * Applies setters without casting
       *
       * @api private
       */

/*!
               * Handle async validators
               */

/*!
       * Wraps `castForQuery` to handle context
       */

/*!
       * Internal switch for runSetters
       *
       * @api private
       */

/*!
     * Module dependencies.
     */

/*!
     * Inherits from MongooseError.
     */

/*!
     * ignore
     */

/*!
     * exports
     */

/*!
     * Getter for convenience with populate, see gh-6115
     */

/*!
     * Inherits from Error.
     */

/*!
               * ignore
               */

/*!
       * If this is a document array, each element may contain single
       * populated paths, so we need to modify the top-level document's
       * populated cache. See gh-8247, gh-8265.
       */

/*!
       * The buffer module from node.js, for the browser.
       *
       * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
       * @license  MIT
       */

/*!
     * Inherit from Document
     */

/*!
     * no-op for hooks
     */

/*!
         * Registers remove event listeners for triggering
         * on subdocuments.
         *
         * @param {EmbeddedDocument} sub
         * @api private
         */

/*!
      * Avoid Node deprecation warning DEP0079
      */

/*!
     * Module requirements
     */

/*!
     * Module exports
     */

/*!
     * inspect helper
     */

/*!
     * Helper for JSON.stringify
     */

/*!
     * add message
     */

/*!
     * Inherits from SchemaType.
     */

/*!
     * Module requirements.
     */

/*!
     * @ignore
     */

/*!
       * Centralize this so we can more easily work around issues with people
       * stubbing out `process.nextTick()` in tests using sinon:
       * https://github.com/sinonjs/lolex#automatically-incrementing-mocked-time
       * See gh-6074
       */

/*!
    * returns discriminator by discriminatorMapping.value
    *
    * @param {Model} model
    * @param {string} value
    */

/*!
     * Given a value, cast it to a boolean, or throw a `CastError` if the value
     * cannot be casted. `null` and `undefined` are considered valid.
     *
     * @param {Any} value
     * @param {String} [path] optional the path to set on the CastError
     * @return {Boolean|null|undefined}
     * @throws {CastError} if `value` is not one of the allowed values
     * @api private
     */

/*!
       * Create virtual properties with alias field
       */

/*!
       * Inherit from EventEmitter.
       */

/*!
       * Document keys to print warnings for
       */

/*!
       * ignore. Deprecated re: #6405
       */

/*!
     * Ignore
     */

/*!
     * Compiles schemas.
     */

/*!
     * Defines the accessor named prop on the incoming prototype.
     */

/*!
       * Use native promises by default
       */

/*!
     * Inherits from MongooseError
     */

/*!
     * The object used to define this validator. Not enumerable to hide
     * it from `require('util').inspect()` output re: gh-3925
     */

/*!
     * Formats error messages
     */

/*!
     * toString helper
     */

/*!
     * Inherit from Buffer.
     */

/*!
     * Compile other Buffer methods marking this buffer as modified.
     */

/*!
     * Since maps are stored as objects under the hood, keys must be strings
     * and can't contain any invalid characters
     */

/*!
       * Registers remove event listeners for triggering
       * on subdocuments.
       *
       * @param {Subdocument} sub
       * @api private
       */

/*!
     * Register hooks for this model
     *
     * @param {Model} model
     * @param {Schema} schema
     */

/*!
     * Given a value, cast it to a string, or throw a `CastError` if the value
     * cannot be casted. `null` and `undefined` are considered valid.
     *
     * @param {Any} value
     * @param {String} [path] optional the path to set on the CastError
     * @return {string|null|undefined}
     * @throws {CastError}
     * @api private
     */

/*!
       * Module requirements.
       */

/*!
       * Inherits from SchemaType.
       */

/*!
     * Find the correct constructor, taking into account discriminators
     */

/*!
     * [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) ObjectId
     * @constructor NodeMongoDbObjectId
     * @see ObjectId
     */

/*!
     * Dependencies
     */

/*!
     * StateMachine represents a minimal `interface` for the
     * constructors it builds via StateMachine.ctor(...).
     *
     * @api private
     */

/*!
     * StateMachine.ctor('state1', 'state2', ...)
     * A factory method for subclassing StateMachine.
     * The arguments are a list of states. For each state,
     * the constructor's prototype gets state transition
     * methods named after each state. These transition methods
     * place their path argument into the given state.
     *
     * @param {String} state
     * @param {String} [state]
     * @return {Function} subclass constructor
     * @private
     */

/*!
     * This function is wrapped by the state change functions:
     *
     * - `require(path)`
     * - `modify(path)`
     * - `init(path)`
     *
     * @api private
     */

/*!
     * Checks to see if at least one path is in the states passed in via `arguments`
     * e.g., this.some('required', 'inited')
     *
     * @param {String} state that we want to check for.
     * @private
     */

/*!
     * This function builds the functions that get assigned to `forEach` and `map`,
     * since both of those methods share a lot of the same logic.
     *
     * @param {String} iterMethod is either 'forEach' or 'map'
     * @return {Function}
     * @api private
     */

/*!
     * Iterates over the paths that belong to one of the parameter states.
     *
     * The function profile can look like:
     * this.forEach(state1, fn);         // iterates over all paths in state1
     * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2
     * this.forEach(fn);                 // iterates over all paths in all states
     *
     * @param {String} [state]
     * @param {String} [state]
     * @param {Function} callback
     * @private
     */

/*!
     * Maps over the paths that belong to one of the parameter states.
     *
     * The function profile can look like:
     * this.forEach(state1, fn);         // iterates over all paths in state1
     * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2
     * this.forEach(fn);                 // iterates over all paths in all states
     *
     * @param {String} [state]
     * @param {String} [state]
     * @param {Function} callback
     * @return {Array}
     * @private
     */

/*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */

/*!
     * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance
     *
     *     Thing.where('type').nin(array)
     */

/*!
       * limit, skip, maxScan, batchSize, comment
       *
       * Sets these associated options.
       *
       *     query.comment('feed query');
       */

/*!
     * Internal helper for update, updateMany, updateOne
     */

/*!
     * Permissions
     */

/*!
     * Exports.
     */

/*!
     * Returns the value passed to it.
     */

/*!
           * Recursively set nested arrays
           */

/*!
     * OverwriteModel Error constructor.
     *
     * @inherits MongooseError
     */

/*!
     * MissingSchema Error constructor.
     *
     * @inherits MongooseError
     */

/*!
     * DivergentArrayError constructor.
     *
     * @inherits MongooseError
     */

/*!
     * Gather all indexes defined in the schema, including single nested,
     * document arrays, and embedded discriminators.
     */

/*!
             * Checks for indexes added to subdocs using Schema.index().
             * These indexes need their paths prefixed properly.
             *
             * schema._indexes = [ [indexObj, options], [indexObj, options] ..]
             */

/*!
     * Apply query middleware
     *
     * @param {Query} query constructor
     * @param {Model} model
     */

/*!
     * Given a value, cast it to a number, or throw a `CastError` if the value
     * cannot be casted. `null` and `undefined` are considered valid.
     *
     * @param {Any} value
     * @param {String} [path] optional the path to set on the CastError
     * @return {Boolean|null|undefined}
     * @throws {Error} if `value` is not one of the allowed values
     * @api private
     */

/*!
     * Scopes paths selected in a query to this array.
     * Necessary for proper default application of subdocument values.
     *
     * @param {DocumentArrayPath} array - the array to scope `fields` paths
     * @param {Object|undefined} fields - the root fields selected in the query
     * @param {Boolean|undefined} init - if we are being created part of a query result
     */

/*!
     * Inherits from ArrayType.
     */

/*!
     * Casts val to an object suitable for `$text`. Throws an error if the object
     * can't be casted.
     *
     * @param {Any} val value to cast
     * @param {String} [path] path to associate with any errors that occured
     * @return {Object} casted object
     * @see https://docs.mongodb.com/manual/reference/operator/query/text/
     * @api private
     */

/*!
     * Special case for when users use a common location schema to represent
     * locations for use with $geoWithin.
     * https://docs.mongodb.org/manual/reference/operator/query/geoWithin/
     *
     * @param {Object} val
     * @api private
     */

/*!
     * Date Query casting.
     *
     * @api private
     */

/*!
     * Like `schema.path()`, except with a document, because impossible to
     * determine path type without knowing the embedded discriminator key.
     */

/*!
     * Returns this documents _id cast to a string.
     */

/*!
     * Inherit from the NodeJS document
     */

/*!
     * Browser doc exposes the event emitter API
     */
